# Generated by Django 4.2.23 on 2025-07-09 07:45

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SystemAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('error', 'Error'), ('warning', 'Warning'), ('info', 'Info')], help_text='告警类型', max_length=20)),
                ('message', models.TextField(help_text='告警消息')),
                ('severity', models.CharField(choices=[('critical', 'Critical'), ('high', 'High'), ('medium', 'Medium'), ('low', 'Low')], help_text='严重程度', max_length=20)),
                ('component', models.CharField(help_text='相关组件', max_length=100)),
                ('resolved', models.BooleanField(default=False, help_text='是否已解决')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='创建时间')),
                ('resolved_at', models.DateTimeField(blank=True, help_text='解决时间', null=True)),
                ('resolved_by', models.CharField(blank=True, help_text='解决人', max_length=100, null=True)),
            ],
            options={
                'verbose_name': '系统告警',
                'verbose_name_plural': '系统告警',
                'db_table': 'settings_system_alert',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='团队名称', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='团队描述')),
                ('avatar', models.URLField(blank=True, help_text='团队头像')),
                ('is_active', models.BooleanField(default=True, help_text='是否活跃')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='更新时间')),
                ('created_by', models.ForeignKey(help_text='创建者', on_delete=django.db.models.deletion.CASCADE, related_name='created_teams', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '团队',
                'verbose_name_plural': '团队',
                'db_table': 'settings_team',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('super_admin', 'Super Admin'), ('admin', 'Admin'), ('manager', 'Manager'), ('developer', 'Developer'), ('viewer', 'Viewer')], default='viewer', help_text='用户角色', max_length=50)),
                ('phone', models.CharField(blank=True, help_text='手机号', max_length=20)),
                ('department', models.CharField(blank=True, help_text='部门', max_length=100)),
                ('avatar', models.URLField(blank=True, help_text='头像URL')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, help_text='最后登录IP', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='更新时间')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '用户档案',
                'verbose_name_plural': '用户档案',
                'db_table': 'settings_user_profile',
            },
        ),
        migrations.CreateModel(
            name='TeamMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('owner', 'Owner'), ('admin', 'Admin'), ('member', 'Member'), ('viewer', 'Viewer')], default='member', help_text='角色', max_length=20)),
                ('joined_at', models.DateTimeField(auto_now_add=True, help_text='加入时间')),
                ('invited_by', models.ForeignKey(blank=True, help_text='邀请者', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='invited_memberships', to=settings.AUTH_USER_MODEL)),
                ('team', models.ForeignKey(help_text='团队', on_delete=django.db.models.deletion.CASCADE, to='settings_management.team')),
                ('user', models.ForeignKey(help_text='用户', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '团队成员',
                'verbose_name_plural': '团队成员',
                'db_table': 'settings_team_membership',
                'unique_together': {('team', 'user')},
            },
        ),
        migrations.AddField(
            model_name='team',
            name='members',
            field=models.ManyToManyField(help_text='团队成员', related_name='teams', through='settings_management.TeamMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='SystemSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('general', 'General'), ('security', 'Security'), ('notification', 'Notification'), ('performance', 'Performance'), ('integration', 'Integration'), ('backup', 'Backup'), ('monitoring', 'Monitoring')], help_text='设置分类', max_length=50)),
                ('key', models.CharField(help_text='设置键', max_length=100, unique=True)),
                ('value', models.TextField(help_text='设置值')),
                ('default_value', models.TextField(help_text='默认值')),
                ('data_type', models.CharField(choices=[('string', 'String'), ('number', 'Number'), ('boolean', 'Boolean'), ('json', 'JSON'), ('list', 'List'), ('password', 'Password')], default='string', help_text='数据类型', max_length=20)),
                ('description', models.TextField(help_text='设置描述')),
                ('is_encrypted', models.BooleanField(default=False, help_text='是否加密')),
                ('is_public', models.BooleanField(default=False, help_text='是否公开')),
                ('validation_rules', models.JSONField(default=dict, help_text='验证规则')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='更新时间')),
                ('updated_by', models.ForeignKey(help_text='更新者', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '系统设置',
                'verbose_name_plural': '系统设置',
                'db_table': 'settings_system_setting',
                'ordering': ['category', 'key'],
            },
        ),
        migrations.CreateModel(
            name='NotificationConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='配置名称', max_length=100)),
                ('type', models.CharField(choices=[('email', 'Email'), ('webhook', 'Webhook'), ('slack', 'Slack'), ('dingtalk', 'DingTalk'), ('wechat', 'WeChat')], help_text='通知类型', max_length=50)),
                ('config', models.JSONField(default=dict, help_text='配置参数')),
                ('enabled', models.BooleanField(default=True, help_text='是否启用')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='更新时间')),
                ('created_by', models.ForeignKey(help_text='创建者', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '通知配置',
                'verbose_name_plural': '通知配置',
                'db_table': 'settings_notification_config',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GlobalConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text='配置键', max_length=100, unique=True)),
                ('value', models.TextField(help_text='配置值')),
                ('type', models.CharField(choices=[('system', 'System'), ('feature', 'Feature'), ('environment', 'Environment'), ('integration', 'Integration')], help_text='配置类型', max_length=50)),
                ('description', models.TextField(help_text='配置描述')),
                ('is_sensitive', models.BooleanField(default=False, help_text='是否敏感信息')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='更新时间')),
                ('created_by', models.ForeignKey(help_text='创建者', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '全局配置',
                'verbose_name_plural': '全局配置',
                'db_table': 'settings_global_config',
                'ordering': ['key'],
            },
        ),
        migrations.CreateModel(
            name='BackupSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='计划名称', max_length=100)),
                ('description', models.TextField(blank=True, help_text='计划描述')),
                ('backup_type', models.CharField(help_text='备份类型', max_length=50)),
                ('frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('custom', 'Custom')], help_text='备份频率', max_length=20)),
                ('cron_expression', models.CharField(blank=True, help_text='Cron表达式', max_length=100)),
                ('retain_days', models.IntegerField(default=30, help_text='保留天数')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('paused', 'Paused')], default='active', help_text='状态', max_length=20)),
                ('notification_config', models.JSONField(default=dict, help_text='通知配置')),
                ('last_run_at', models.DateTimeField(blank=True, help_text='最后运行时间', null=True)),
                ('next_run_at', models.DateTimeField(blank=True, help_text='下次运行时间', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='更新时间')),
                ('created_by', models.ForeignKey(help_text='创建者', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '备份计划',
                'verbose_name_plural': '备份计划',
                'db_table': 'settings_backup_schedule',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BackupRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='备份名称', max_length=100)),
                ('file_path', models.CharField(help_text='备份文件路径', max_length=500)),
                ('file_size', models.BigIntegerField(default=0, help_text='文件大小(字节)')),
                ('backup_type', models.CharField(help_text='备份类型', max_length=50)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', help_text='备份状态', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='创建时间')),
                ('completed_at', models.DateTimeField(blank=True, help_text='完成时间', null=True)),
                ('error_message', models.TextField(blank=True, help_text='错误信息')),
                ('created_by', models.ForeignKey(help_text='创建者', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '备份记录',
                'verbose_name_plural': '备份记录',
                'db_table': 'settings_backup_record',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('CREATE', 'Create'), ('UPDATE', 'Update'), ('DELETE', 'Delete'), ('LOGIN', 'Login'), ('LOGOUT', 'Logout'), ('VIEW', 'View'), ('EXECUTE', 'Execute'), ('APPROVE', 'Approve'), ('REJECT', 'Reject')], help_text='操作类型', max_length=50)),
                ('resource_type', models.CharField(help_text='资源类型', max_length=100)),
                ('resource_id', models.CharField(blank=True, help_text='资源ID', max_length=100, null=True)),
                ('details', models.JSONField(default=dict, help_text='操作详情')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP地址', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='用户代理', null=True)),
                ('result', models.CharField(choices=[('success', 'Success'), ('failure', 'Failure'), ('warning', 'Warning')], default='success', help_text='操作结果', max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='操作时间')),
                ('user', models.ForeignKey(help_text='操作用户', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '审计日志',
                'verbose_name_plural': '审计日志',
                'db_table': 'settings_audit_log',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='APIKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='密钥名称', max_length=100)),
                ('key', models.CharField(help_text='API密钥', max_length=64, unique=True)),
                ('secret', models.CharField(help_text='API秘钥', max_length=128)),
                ('permissions', models.JSONField(default=list, help_text='权限列表')),
                ('rate_limit', models.IntegerField(default=1000, help_text='速率限制(每小时)')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('expired', 'Expired')], default='active', help_text='状态', max_length=20)),
                ('expires_at', models.DateTimeField(blank=True, help_text='过期时间', null=True)),
                ('last_used_at', models.DateTimeField(blank=True, help_text='最后使用时间', null=True)),
                ('usage_count', models.IntegerField(default=0, help_text='使用次数')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='更新时间')),
                ('created_by', models.ForeignKey(help_text='创建者', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'API密钥',
                'verbose_name_plural': 'API密钥',
                'db_table': 'settings_api_key',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='APIEndpoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='端点名称', max_length=100)),
                ('path', models.CharField(help_text='API路径', max_length=200)),
                ('method', models.CharField(choices=[('GET', 'GET'), ('POST', 'POST'), ('PUT', 'PUT'), ('DELETE', 'DELETE'), ('PATCH', 'PATCH')], help_text='HTTP方法', max_length=10)),
                ('description', models.TextField(blank=True, help_text='描述')),
                ('is_enabled', models.BooleanField(default=True, help_text='是否启用')),
                ('rate_limit', models.IntegerField(default=100, help_text='速率限制(每分钟)')),
                ('auth_required', models.BooleanField(default=True, help_text='是否需要认证')),
                ('permissions_required', models.JSONField(default=list, help_text='所需权限')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='更新时间')),
            ],
            options={
                'verbose_name': 'API端点',
                'verbose_name_plural': 'API端点',
                'db_table': 'settings_api_endpoint',
                'unique_together': {('path', 'method')},
            },
        ),
    ]
