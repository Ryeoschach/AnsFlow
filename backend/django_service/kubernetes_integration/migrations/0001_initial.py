# Generated by Django 4.2.23 on 2025-07-09 04:06

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='KubernetesCluster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='集群名称')),
                ('description', models.TextField(blank=True, verbose_name='描述')),
                ('cluster_type', models.CharField(choices=[('k8s', '标准 Kubernetes'), ('eks', 'Amazon EKS'), ('gke', 'Google GKE'), ('aks', 'Azure AKS'), ('rke', 'Rancher RKE'), ('k3s', 'K3s'), ('minikube', 'Minikube'), ('kind', 'Kind')], default='k8s', max_length=20, verbose_name='集群类型')),
                ('api_server', models.URLField(verbose_name='API Server URL')),
                ('auth_config', models.JSONField(default=dict, verbose_name='认证配置')),
                ('kubernetes_version', models.CharField(blank=True, max_length=50, verbose_name='K8s 版本')),
                ('default_namespace', models.CharField(default='default', max_length=100, verbose_name='默认命名空间')),
                ('status', models.CharField(choices=[('active', '活跃'), ('inactive', '不活跃'), ('error', '错误'), ('connecting', '连接中')], default='inactive', max_length=20, verbose_name='集群状态')),
                ('last_check', models.DateTimeField(blank=True, null=True, verbose_name='最后检查时间')),
                ('check_message', models.TextField(blank=True, verbose_name='检查信息')),
                ('total_nodes', models.IntegerField(default=0, verbose_name='节点总数')),
                ('ready_nodes', models.IntegerField(default=0, verbose_name='就绪节点数')),
                ('total_pods', models.IntegerField(default=0, verbose_name='Pod 总数')),
                ('running_pods', models.IntegerField(default=0, verbose_name='运行中 Pod 数')),
                ('is_default', models.BooleanField(default=False, verbose_name='默认集群')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='创建者')),
            ],
            options={
                'verbose_name': 'Kubernetes 集群',
                'verbose_name_plural': 'Kubernetes 集群',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='KubernetesNamespace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='命名空间名称')),
                ('status', models.CharField(choices=[('active', '活跃'), ('terminating', '终止中')], default='active', max_length=20, verbose_name='状态')),
                ('cpu_limit', models.CharField(blank=True, max_length=50, verbose_name='CPU 限制')),
                ('memory_limit', models.CharField(blank=True, max_length=50, verbose_name='内存限制')),
                ('storage_limit', models.CharField(blank=True, max_length=50, verbose_name='存储限制')),
                ('labels', models.JSONField(default=dict, verbose_name='标签')),
                ('annotations', models.JSONField(default=dict, verbose_name='注解')),
                ('pod_count', models.IntegerField(default=0, verbose_name='Pod 数量')),
                ('service_count', models.IntegerField(default=0, verbose_name='Service 数量')),
                ('deployment_count', models.IntegerField(default=0, verbose_name='Deployment 数量')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='namespaces', to='kubernetes_integration.kubernetescluster', verbose_name='所属集群')),
            ],
            options={
                'verbose_name': 'Kubernetes 命名空间',
                'verbose_name_plural': 'Kubernetes 命名空间',
                'ordering': ['cluster', 'name'],
                'unique_together': {('cluster', 'name')},
            },
        ),
        migrations.CreateModel(
            name='KubernetesDeployment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='部署名称')),
                ('status', models.CharField(choices=[('progressing', '部署中'), ('available', '可用'), ('replicafailure', '副本失败'), ('unknown', '未知')], default='unknown', max_length=20, verbose_name='部署状态')),
                ('image', models.CharField(max_length=500, verbose_name='容器镜像')),
                ('image_pull_policy', models.CharField(choices=[('Always', '总是拉取'), ('IfNotPresent', '如果不存在则拉取'), ('Never', '从不拉取')], default='IfNotPresent', max_length=20, verbose_name='镜像拉取策略')),
                ('replicas', models.IntegerField(default=1, verbose_name='期望副本数')),
                ('ready_replicas', models.IntegerField(default=0, verbose_name='就绪副本数')),
                ('available_replicas', models.IntegerField(default=0, verbose_name='可用副本数')),
                ('cpu_request', models.CharField(blank=True, max_length=50, verbose_name='CPU 请求')),
                ('cpu_limit', models.CharField(blank=True, max_length=50, verbose_name='CPU 限制')),
                ('memory_request', models.CharField(blank=True, max_length=50, verbose_name='内存请求')),
                ('memory_limit', models.CharField(blank=True, max_length=50, verbose_name='内存限制')),
                ('environment_vars', models.JSONField(default=dict, verbose_name='环境变量')),
                ('config_maps', models.JSONField(default=list, verbose_name='ConfigMap 引用')),
                ('secrets', models.JSONField(default=list, verbose_name='Secret 引用')),
                ('ports', models.JSONField(default=list, verbose_name='端口配置')),
                ('volumes', models.JSONField(default=list, verbose_name='卷配置')),
                ('volume_mounts', models.JSONField(default=list, verbose_name='卷挂载')),
                ('labels', models.JSONField(default=dict, verbose_name='标签')),
                ('selector', models.JSONField(default=dict, verbose_name='选择器')),
                ('strategy_type', models.CharField(choices=[('RollingUpdate', '滚动更新'), ('Recreate', '重新创建')], default='RollingUpdate', max_length=20, verbose_name='部署策略')),
                ('max_surge', models.CharField(default='25%', max_length=20, verbose_name='最大激增')),
                ('max_unavailable', models.CharField(default='25%', max_length=20, verbose_name='最大不可用')),
                ('description', models.TextField(blank=True, verbose_name='描述')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deployments', to='kubernetes_integration.kubernetescluster', verbose_name='所属集群')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='创建者')),
                ('namespace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deployments', to='kubernetes_integration.kubernetesnamespace', verbose_name='命名空间')),
            ],
            options={
                'verbose_name': 'Kubernetes 部署',
                'verbose_name_plural': 'Kubernetes 部署',
                'ordering': ['-created_at'],
                'unique_together': {('cluster', 'namespace', 'name')},
            },
        ),
        migrations.CreateModel(
            name='KubernetesService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='服务名称')),
                ('service_type', models.CharField(choices=[('ClusterIP', '集群内部'), ('NodePort', '节点端口'), ('LoadBalancer', '负载均衡器'), ('ExternalName', '外部名称')], default='ClusterIP', max_length=20, verbose_name='服务类型')),
                ('cluster_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='集群 IP')),
                ('external_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='外部 IP')),
                ('load_balancer_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='负载均衡器 IP')),
                ('ports', models.JSONField(default=list, verbose_name='端口配置')),
                ('selector', models.JSONField(default=dict, verbose_name='选择器')),
                ('labels', models.JSONField(default=dict, verbose_name='标签')),
                ('session_affinity', models.CharField(choices=[('None', '无'), ('ClientIP', '客户端 IP')], default='None', max_length=20, verbose_name='会话亲和性')),
                ('description', models.TextField(blank=True, verbose_name='描述')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='kubernetes_integration.kubernetescluster', verbose_name='所属集群')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='创建者')),
                ('namespace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='kubernetes_integration.kubernetesnamespace', verbose_name='命名空间')),
            ],
            options={
                'verbose_name': 'Kubernetes 服务',
                'verbose_name_plural': 'Kubernetes 服务',
                'ordering': ['-created_at'],
                'unique_together': {('cluster', 'namespace', 'name')},
            },
        ),
        migrations.CreateModel(
            name='KubernetesSecret',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Secret 名称')),
                ('secret_type', models.CharField(choices=[('Opaque', '不透明'), ('kubernetes.io/service-account-token', '服务账户令牌'), ('kubernetes.io/dockercfg', 'Docker 配置'), ('kubernetes.io/dockerconfigjson', 'Docker 配置 JSON'), ('kubernetes.io/basic-auth', '基础认证'), ('kubernetes.io/ssh-auth', 'SSH 认证'), ('kubernetes.io/tls', 'TLS')], default='Opaque', max_length=50, verbose_name='Secret 类型')),
                ('data', models.JSONField(default=dict, verbose_name='Secret 数据')),
                ('labels', models.JSONField(default=dict, verbose_name='标签')),
                ('annotations', models.JSONField(default=dict, verbose_name='注解')),
                ('description', models.TextField(blank=True, verbose_name='描述')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='secrets', to='kubernetes_integration.kubernetescluster', verbose_name='所属集群')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='创建者')),
                ('namespace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='secrets', to='kubernetes_integration.kubernetesnamespace', verbose_name='命名空间')),
            ],
            options={
                'verbose_name': 'Kubernetes Secret',
                'verbose_name_plural': 'Kubernetes Secret',
                'ordering': ['-created_at'],
                'unique_together': {('cluster', 'namespace', 'name')},
            },
        ),
        migrations.CreateModel(
            name='KubernetesPod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Pod 名称')),
                ('phase', models.CharField(choices=[('Pending', '等待中'), ('Running', '运行中'), ('Succeeded', '已成功'), ('Failed', '已失败'), ('Unknown', '未知')], default='Pending', max_length=20, verbose_name='Pod 阶段')),
                ('node_name', models.CharField(blank=True, max_length=100, verbose_name='节点名称')),
                ('pod_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='Pod IP')),
                ('host_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='主机 IP')),
                ('containers', models.JSONField(default=list, verbose_name='容器信息')),
                ('restart_count', models.IntegerField(default=0, verbose_name='重启次数')),
                ('cpu_usage', models.FloatField(blank=True, null=True, verbose_name='CPU 使用率')),
                ('memory_usage', models.BigIntegerField(blank=True, null=True, verbose_name='内存使用 (字节)')),
                ('start_time', models.DateTimeField(blank=True, null=True, verbose_name='启动时间')),
                ('ready', models.BooleanField(default=False, verbose_name='就绪状态')),
                ('labels', models.JSONField(default=dict, verbose_name='标签')),
                ('annotations', models.JSONField(default=dict, verbose_name='注解')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pods', to='kubernetes_integration.kubernetescluster', verbose_name='所属集群')),
                ('deployment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pods', to='kubernetes_integration.kubernetesdeployment', verbose_name='所属部署')),
                ('namespace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pods', to='kubernetes_integration.kubernetesnamespace', verbose_name='命名空间')),
            ],
            options={
                'verbose_name': 'Kubernetes Pod',
                'verbose_name_plural': 'Kubernetes Pod',
                'ordering': ['-created_at'],
                'unique_together': {('cluster', 'namespace', 'name')},
            },
        ),
        migrations.CreateModel(
            name='KubernetesConfigMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='ConfigMap 名称')),
                ('data', models.JSONField(default=dict, verbose_name='配置数据')),
                ('binary_data', models.JSONField(default=dict, verbose_name='二进制数据')),
                ('labels', models.JSONField(default=dict, verbose_name='标签')),
                ('annotations', models.JSONField(default=dict, verbose_name='注解')),
                ('description', models.TextField(blank=True, verbose_name='描述')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='configmaps', to='kubernetes_integration.kubernetescluster', verbose_name='所属集群')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='创建者')),
                ('namespace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='configmaps', to='kubernetes_integration.kubernetesnamespace', verbose_name='命名空间')),
            ],
            options={
                'verbose_name': 'Kubernetes ConfigMap',
                'verbose_name_plural': 'Kubernetes ConfigMap',
                'ordering': ['-created_at'],
                'unique_together': {('cluster', 'namespace', 'name')},
            },
        ),
    ]
