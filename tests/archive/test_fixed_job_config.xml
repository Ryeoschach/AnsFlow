<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.40">
  <actions/>
  <description>Generated by AnsFlow CI/CD Platform</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.92">
    <script>pipeline {
    agent any
    
    options {
        timeout(time: 60, unit: &#x27;MINUTES&#x27;)
        buildDiscarder(logRotator(numToKeepStr: &#x27;10&#x27;))
    }
    environment {
        NODE_ENV = &#x27;production&#x27;
        API_URL = &#x27;https://api.example.com/v1&#x27;
        DB_URL = &#x27;postgresql://user:pass@host:5432/db&#x27;
    }
    
    stages {
        stage(&#x27;Code__Build&#x27;) {
            steps {
                sh &#x27;git clone &quot;repo&quot; &amp;&amp; echo &quot;Success!&quot; &amp;&amp; echo \&#x27;Single quotes test\&#x27;&#x27;
            }
        }
        stage(&#x27;Ansible_Deploy&#x27;) {
            steps {
                
                sh &#x27;echo &quot;Starting Ansible playbook execution...&quot;&#x27;
                sh &#x27;ansible-playbook -i hosts --extra-vars &quot;env=prod db_url=postgresql://user:pass@host:5432/db&quot; --tags deploy,config -v deploy.yml&#x27;
                sh &#x27;echo &quot;Ansible playbook execution completed&quot;&#x27;
            }
        }
        stage(&#x27;Custom_Script&#x27;) {
            steps {
                sh &#x27;echo &quot;Test &lt;&gt;&amp;\&#x27;&quot; &amp;&amp; curl -X POST -d \&#x27;{&quot;key&quot;: &quot;value&quot;}\&#x27; http://api.test.com&#x27;
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo &#x27;Pipeline completed successfully!&#x27;
        }
        failure {
            echo &#x27;Pipeline failed!&#x27;
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>