#!/usr/bin/env python3
"""
修复Jenkins XML转义问题的脚本
"""
import html
import xml.etree.ElementTree as ET

def test_xml_escaping():
    """测试XML转义功能"""
    print("=== XML转义测试 ===")
    
    # 测试包含特殊字符的Jenkinsfile
    jenkinsfile = """pipeline {
    agent any
    
    stages {
        stage('Test & Build') {
            steps {
                sh 'echo "Hello World!" && echo "Testing quotes"'
                sh 'echo "Ansible test: --extra-vars key=value"'
            }
        }
    }
}"""
    
    print("原始Jenkinsfile:")
    print(jenkinsfile)
    print()
    
    # XML转义
    escaped_jenkinsfile = html.escape(jenkinsfile)
    print("XML转义后:")
    print(escaped_jenkinsfile)
    print()
    
    # 构建完整的Job XML
    job_xml = f"""<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.40">
  <actions/>
  <description>Generated by AnsFlow CI/CD Platform</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.92">
    <script>{escaped_jenkinsfile}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>"""
    
    print("完整Job XML:")
    print(job_xml)
    print()
    
    # 验证XML格式
    try:
        ET.fromstring(job_xml)
        print("✅ XML格式验证通过")
    except ET.ParseError as e:
        print(f"❌ XML格式验证失败: {e}")
        return False
    
    return True

def test_problematic_characters():
    """测试可能导致问题的字符"""
    print("\n=== 问题字符测试 ===")
    
    problematic_chars = [
        ('单引号', "'"),
        ('双引号', '"'),
        ('小于号', '<'),
        ('大于号', '>'),
        ('与符号', '&'),
        ('反斜杠', '\\'),
        ('换行符', '\n'),
        ('制表符', '\t'),
        ('中文字符', '测试中文'),
        ('特殊字符', '@#$%^&*()'),
    ]
    
    for name, char in problematic_chars:
        test_content = f"echo '{char}'"
        escaped = html.escape(test_content)
        print(f"{name:10} 原始: {test_content:20} 转义: {escaped}")
    
    print()

def test_ansible_command_escaping():
    """测试Ansible命令的转义"""
    print("=== Ansible命令转义测试 ===")
    
    ansible_commands = [
        'ansible-playbook -i hosts deploy.yml',
        'ansible-playbook -i hosts --extra-vars "key=value env=prod"',
        'ansible-playbook -i hosts --extra-vars key=value --tags deploy',
        'ansible-playbook -i hosts --limit "web*" deploy.yml',
    ]
    
    for cmd in ansible_commands:
        shell_cmd = f"sh '{cmd}'"
        print(f"Shell命令: {shell_cmd}")
        escaped = html.escape(shell_cmd)
        print(f"XML转义:  {escaped}")
        print()

if __name__ == "__main__":
    print("Jenkins XML转义问题诊断和修复脚本")
    print("=" * 50)
    
    # 运行测试
    if test_xml_escaping():
        test_problematic_characters()
        test_ansible_command_escaping()
        
        print("\n=== 修复建议 ===")
        print("1. 在Jenkins适配器中，所有Jenkinsfile内容都需要进行HTML/XML转义")
        print("2. 特别注意单引号、双引号、小于号、大于号、与符号的转义")
        print("3. 可以使用html.escape()函数进行转义")
        print("4. 确保转义后的XML格式正确")
        
        print("\n修复代码示例:")
        print("""
import html

# 在create_pipeline方法中：
escaped_jenkinsfile = html.escape(jenkinsfile)
job_config = f'''...
<script>{escaped_jenkinsfile}</script>
...'''
""")
    else:
        print("XML转义测试失败，需要进一步调试")
