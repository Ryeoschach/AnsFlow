#!/usr/bin/env python3
"""
Debug Jenkins Job Creation - 诊断Jenkins创建Job失败的问题
"""

import os
import sys
import django
import asyncio
import logging
import json
import xml.etree.ElementTree as ET

# 设置Django环境
sys.path.append('/Users/creed/workspace/sourceCode/AnsFlow/backend/django_service')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ansflow.settings')
django.setup()

from cicd_integrations.models import CICDTool
from cicd_integrations.adapters.jenkins import JenkinsAdapter
from cicd_integrations.adapters import PipelineDefinition

# 设置日志
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_jenkins_job_creation():
    """测试Jenkins Job创建流程"""
    
    # 1. 获取Jenkins集成配置
    try:
        from asgiref.sync import sync_to_async
        
        jenkins_tool = await sync_to_async(CICDTool.objects.filter(
            tool_type='jenkins', 
            status__in=['active', 'authenticated']
        ).first)()
        
        if not jenkins_tool:
            logger.error("No active Jenkins tool found")
            return False
            
        logger.info(f"Using Jenkins tool: {jenkins_tool.name}")
        logger.info(f"Jenkins URL: {jenkins_tool.base_url}")
        
    except Exception as e:
        logger.error(f"Failed to get Jenkins tool: {e}")
        return False
    
    # 2. 创建Jenkins适配器
    try:
        adapter = JenkinsAdapter(
            base_url=jenkins_tool.base_url,
            username=jenkins_tool.username,
            token=jenkins_tool.token,
            **jenkins_tool.config
        )
        logger.info("Jenkins adapter created successfully")
        
    except Exception as e:
        logger.error(f"Failed to create Jenkins adapter: {e}")
        return False
    
    # 3. 创建测试流水线定义
    test_steps = [
        {
            'type': 'fetch_code',
            'name': 'Code Checkout',
            'description': 'Check out source code',
            'parameters': {
                'repository': 'https://github.com/example/repo.git',
                'branch': 'main'
            }
        },
        {
            'type': 'build',
            'name': 'Build Application',
            'description': 'Build the application',
            'parameters': {
                'build_tool': 'npm',
                'build_command': 'npm run build'
            }
        },
        {
            'type': 'test',
            'name': 'Run Tests',
            'description': 'Execute unit tests',
            'parameters': {
                'test_command': 'npm test',
                'coverage': True
            }
        },
        {
            'type': 'ansible',
            'name': 'Deploy with Ansible',
            'description': 'Deploy using Ansible playbook',
            'parameters': {
                'playbook_path': 'deploy.yml',
                'inventory_path': 'inventory/production',
                'extra_vars': {
                    'env': 'production',
                    'version': '1.0.0'
                }
            }
        }
    ]
    
    pipeline_def = PipelineDefinition(
        name="Test Jenkins Pipeline",
        steps=test_steps,
        triggers={},
        environment={
            'NODE_ENV': 'production',
            'BUILD_NUMBER': '${BUILD_NUMBER}'
        },
        artifacts=[],
        timeout=3600
    )
    
    # 4. 生成Jenkinsfile内容
    try:
        jenkinsfile = await adapter.create_pipeline_file(pipeline_def)
        logger.info("Generated Jenkinsfile:")
        print("=" * 80)
        print(jenkinsfile)
        print("=" * 80)
        
        # 检查Jenkinsfile是否有明显的语法问题
        if not jenkinsfile.strip():
            logger.error("Generated Jenkinsfile is empty")
            return False
            
        if "pipeline {" not in jenkinsfile:
            logger.error("Jenkinsfile doesn't contain pipeline block")
            return False
            
    except Exception as e:
        logger.error(f"Failed to generate Jenkinsfile: {e}")
        return False
    
    # 5. 生成Job配置XML
    try:
        import re
        job_name = pipeline_def.name.replace(' ', '-').lower()
        job_name = re.sub(r'[^a-z0-9\-_]', '', job_name)
        
        # 转义Jenkinsfile中的特殊字符用于XML
        escaped_jenkinsfile = jenkinsfile.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
        
        job_config = f"""<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.40">
  <actions/>
  <description>Generated by AnsFlow CI/CD Platform</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.92">
    <script>{escaped_jenkinsfile}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>"""
        
        logger.info(f"Generated job name: {job_name}")
        logger.info("Generated Job XML:")
        print("=" * 80)
        print(job_config)
        print("=" * 80)
        
        # 验证XML格式
        try:
            ET.fromstring(job_config)
            logger.info("XML format is valid")
        except ET.ParseError as e:
            logger.error(f"XML format is invalid: {e}")
            return False
            
    except Exception as e:
        logger.error(f"Failed to generate job config XML: {e}")
        return False
    
    # 6. 测试Jenkins连接
    try:
        # 测试基本连接
        crumb = await adapter._get_crumb()
        if crumb:
            logger.info(f"Successfully got Jenkins crumb: {crumb[0]}")
        else:
            logger.warning("No crumb received (might be disabled)")
        
        # 测试认证
        response = await adapter._make_authenticated_request('GET', f"{adapter.base_url}/api/json")
        if response.status_code == 200:
            logger.info("Jenkins authentication successful")
        else:
            logger.error(f"Jenkins authentication failed: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"Failed to test Jenkins connection: {e}")
        return False
    
    # 7. 尝试创建Job (但不实际执行，只测试到这一步)
    try:
        logger.info("About to test job creation...")
        
        # 检查job是否已存在
        check_url = f"{adapter.base_url}/job/{job_name}/api/json"
        check_response = await adapter._make_authenticated_request('GET', check_url)
        
        if check_response.status_code == 200:
            logger.info(f"Job '{job_name}' already exists")
            # 可以选择更新或跳过
        elif check_response.status_code == 404:
            logger.info(f"Job '{job_name}' does not exist, ready to create")
        else:
            logger.warning(f"Unexpected response when checking job existence: {check_response.status_code}")
        
        # 如果你想实际创建job，取消下面的注释
        logger.info("Attempting to create the job in Jenkins...")
        result = await adapter.create_pipeline(pipeline_def)
        logger.info(f"Job creation result: {result}")
        
        return True
        
    except Exception as e:
        logger.error(f"Error during job creation test: {e}")
        return False

async def main():
    """主函数"""
    logger.info("Starting Jenkins job creation debug test...")
    
    try:
        success = await test_jenkins_job_creation()
        
        if success:
            logger.info("✅ Jenkins job creation test completed successfully")
        else:
            logger.error("❌ Jenkins job creation test failed")
            
    except Exception as e:
        logger.error(f"Test execution failed: {e}")
        return False
    
    return success

if __name__ == "__main__":
    result = asyncio.run(main())
    exit(0 if result else 1)
